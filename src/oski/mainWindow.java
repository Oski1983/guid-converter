package oski;

import java.awt.EventQueue;

import javax.swing.JFrame;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.RowSpec;
import com.jgoodies.forms.layout.FormSpecs;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.io.Console;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.awt.event.ActionEvent;
import java.awt.FlowLayout;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import net.miginfocom.swing.MigLayout;

public class mainWindow {

	private JFrame frame;
	private JTextField steamUID;
	private JTextField GameUID;
	private JTextArea textArea;
	private JScrollPane scrollPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					mainWindow window = new mainWindow();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public mainWindow() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 691, 454);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		
		steamUID = new JTextField();
		steamUID.setText("76561198184847946");
		frame.getContentPane().add(steamUID);
		steamUID.setColumns(16);
		
		JButton btnConvert = new JButton("Convert");
		btnConvert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				
				
				
				BigInteger sUID = new BigInteger(steamUID.getText());
				
				Integer[] parts = {0x42, 0x45, 0, 0, 0, 0, 0, 0, 0, 0};
				
				textArea.append("1.Byte fixed: " + 0x42 + "\n2.Byte fixed: " + 0x45 + "\n");
				
				
				for (Integer i = 2; i < 10; i++)
				{
					BigInteger[] res = sUID.divideAndRemainder(new BigInteger("256"));
					textArea.append((i + 1) +".Byte:" + sUID.toString() + "/ 256 = " + res[0].toString() + " (as BigInt for next Byte " + res[1].toString() + " Reminder for this Byte.)\n");
					sUID = res[0];
					parts[i] = res[1].intValue();
					
				}
				
				
				
				
				
				for (Integer i:parts)
				{
					textArea.append("Generated Bytes: " + i + "\n");
				}
				
				
				MessageDigest md;
				try {
					md = MessageDigest.getInstance("MD5");
					md.reset();
					for (Integer i = 0; i < parts.length; i++)
						md.update(parts[i].byteValue());
				byte[] digest = md.digest();
				BigInteger bigInt = new BigInteger(1, digest);
				String hash = bigInt.toString(16);
				while (hash.length() < 32)
				{
					hash = "0"+hash;
				}
				textArea.append("Md5 hash builded: " + hash + "\n");
				GameUID.setText(hash);
				} catch (NoSuchAlgorithmException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		});
		frame.getContentPane().add(btnConvert);
		
		GameUID = new JTextField();
		frame.getContentPane().add(GameUID);
		GameUID.setColumns(32);
		
		scrollPane = new JScrollPane();
		frame.getContentPane().add(scrollPane);
		
		textArea = new JTextArea();
		scrollPane.setViewportView(textArea);
		textArea.setRows(20);
		textArea.setColumns(60);
	}

	public JTextArea getTextArea() {
		return textArea;
	}
}
